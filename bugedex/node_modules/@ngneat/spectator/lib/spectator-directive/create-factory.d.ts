import { Provider, Type } from '@angular/core';
import { HostComponent } from '@ngneat/spectator/lib/spectator-host/host-component';
import { BaseSpectatorOverrides } from '@ngneat/spectator/lib/base/options';
import { SpectatorDirectiveOptions } from '@ngneat/spectator/lib/spectator-directive/options';
import { SpectatorDirective } from '@ngneat/spectator/lib/spectator-directive/spectator-directive';
/**
 * @publicApi
 */
export declare type SpectatorDirectiveFactory<D, H> = <HP>(template: string, overrides?: SpectatorDirectiveOverrides<D, H, HP>) => SpectatorDirective<D, H & (HostComponent extends H ? HP : unknown)>;
/**
 * @publicApi
 */
export declare type PresetSpectatorDirectiveFactory<D, H> = <HP>(template?: string, overrides?: SpectatorDirectiveOverrides<D, H, HP>) => SpectatorDirective<D, H & (HostComponent extends H ? HP : unknown)>;
/**
 * @publicApi
 */
export interface SpectatorDirectiveOverrides<D, H, HP> extends BaseSpectatorOverrides {
    detectChanges?: boolean;
    props?: Partial<D>;
    hostProps?: HostComponent extends H ? HP : Partial<H>;
    directiveProviders?: Provider[];
}
/**
 * @publicApi
 */
export declare function createDirectiveFactory<D, H = HostComponent>(options: SpectatorDirectiveOptions<D, H> & {
    template: string;
}): PresetSpectatorDirectiveFactory<D, H>;
/**
 * @publicApi
 */
export declare function createDirectiveFactory<D, H = HostComponent>(typeOrOptions: Type<D> | SpectatorDirectiveOptions<D, H>): SpectatorDirectiveFactory<D, H>;
