import { isNumber, isString, isObject } from '../types';
export const parseKeyOptions = (keyOrKeyCode) => {
    if (isNumber(keyOrKeyCode) && keyOrKeyCode) {
        return { key: false, keyCode: keyOrKeyCode, modifiers: {} };
    }
    if (isString(keyOrKeyCode) && keyOrKeyCode) {
        return parseKey(keyOrKeyCode);
    }
    if (isObject(keyOrKeyCode)) {
        const parsedKey = parseKey(keyOrKeyCode.key);
        return {
            ...parsedKey,
            keyCode: keyOrKeyCode.keyCode
        };
    }
    throw new Error('keyboard.pressKey() requires a valid key or keyCode');
};
const parseKey = (keyStr) => {
    if (keyStr.indexOf('.') < 0 || '.' === keyStr) {
        return { key: keyStr, keyCode: false, modifiers: {} };
    }
    const keyParts = keyStr.split('.');
    const key = keyParts.pop();
    const modifiers = keyParts.reduce((mods, part) => {
        switch (part) {
            case 'control':
            case 'ctrl':
                mods.control = true;
                return mods;
            case 'shift':
                mods.shift = true;
                return mods;
            case 'alt':
                mods.alt = true;
                return mods;
            case 'meta':
            case 'cmd':
            case 'win':
                mods.meta = true;
                return mods;
            default:
                throw new Error(`invalid key modifier: ${part ? part : 'undefined'}, keyStr: ${keyStr}`);
        }
    }, { alt: false, control: false, shift: false, meta: false });
    return { key, keyCode: false, modifiers };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5LXBhcnNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3NwZWN0YXRvci9zcmMvbGliL2ludGVybmFscy9rZXktcGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUF3QixRQUFRLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFlOUUsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsWUFBb0QsRUFBYyxFQUFFO0lBQ2xHLElBQUksUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLFlBQVksRUFBRTtRQUMxQyxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQztLQUM3RDtJQUVELElBQUksUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLFlBQVksRUFBRTtRQUMxQyxPQUFPLFFBQVEsQ0FBQyxZQUFzQixDQUFDLENBQUM7S0FDekM7SUFFRCxJQUFJLFFBQVEsQ0FBQyxZQUFZLENBQUMsRUFBRTtRQUMxQixNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTdDLE9BQU87WUFDTCxHQUFHLFNBQVM7WUFDWixPQUFPLEVBQUUsWUFBWSxDQUFDLE9BQU87U0FDOUIsQ0FBQztLQUNIO0lBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO0FBQ3pFLENBQUMsQ0FBQztBQUVGLE1BQU0sUUFBUSxHQUFHLENBQUMsTUFBYyxFQUFjLEVBQUU7SUFDOUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEtBQUssTUFBTSxFQUFFO1FBQzdDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUFDO0tBQ3ZEO0lBRUQsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQyxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFZLENBQUM7SUFDckMsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FDL0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDYixRQUFRLElBQUksRUFBRTtZQUNaLEtBQUssU0FBUyxDQUFDO1lBQ2YsS0FBSyxNQUFNO2dCQUNULElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO2dCQUVwQixPQUFPLElBQUksQ0FBQztZQUNkLEtBQUssT0FBTztnQkFDVixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztnQkFFbEIsT0FBTyxJQUFJLENBQUM7WUFDZCxLQUFLLEtBQUs7Z0JBQ1IsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7Z0JBRWhCLE9BQU8sSUFBSSxDQUFDO1lBQ2QsS0FBSyxNQUFNLENBQUM7WUFDWixLQUFLLEtBQUssQ0FBQztZQUNYLEtBQUssS0FBSztnQkFDUixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFFakIsT0FBTyxJQUFJLENBQUM7WUFDZDtnQkFDRSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsV0FBVyxhQUFhLE1BQU0sRUFBRSxDQUFDLENBQUM7U0FDNUY7SUFDSCxDQUFDLEVBQ0QsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQzFELENBQUM7SUFFRixPQUFPLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLENBQUM7QUFDNUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNOdW1iZXIsIGlzU3RyaW5nLCBLZXlib2FyZEV2ZW50T3B0aW9ucywgaXNPYmplY3QgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9kaWZpZXJLZXlzIHtcbiAgYWx0PzogYm9vbGVhbjtcbiAgY29udHJvbD86IGJvb2xlYW47XG4gIHNoaWZ0PzogYm9vbGVhbjtcbiAgbWV0YT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2V5T3B0aW9ucyB7XG4gIGtleTogc3RyaW5nIHwgZmFsc2U7XG4gIGtleUNvZGU6IG51bWJlciB8IGZhbHNlO1xuICBtb2RpZmllcnM6IE1vZGlmaWVyS2V5cztcbn1cblxuZXhwb3J0IGNvbnN0IHBhcnNlS2V5T3B0aW9ucyA9IChrZXlPcktleUNvZGU6IHN0cmluZyB8IG51bWJlciB8IEtleWJvYXJkRXZlbnRPcHRpb25zKTogS2V5T3B0aW9ucyA9PiB7XG4gIGlmIChpc051bWJlcihrZXlPcktleUNvZGUpICYmIGtleU9yS2V5Q29kZSkge1xuICAgIHJldHVybiB7IGtleTogZmFsc2UsIGtleUNvZGU6IGtleU9yS2V5Q29kZSwgbW9kaWZpZXJzOiB7fSB9O1xuICB9XG5cbiAgaWYgKGlzU3RyaW5nKGtleU9yS2V5Q29kZSkgJiYga2V5T3JLZXlDb2RlKSB7XG4gICAgcmV0dXJuIHBhcnNlS2V5KGtleU9yS2V5Q29kZSBhcyBzdHJpbmcpO1xuICB9XG5cbiAgaWYgKGlzT2JqZWN0KGtleU9yS2V5Q29kZSkpIHtcbiAgICBjb25zdCBwYXJzZWRLZXkgPSBwYXJzZUtleShrZXlPcktleUNvZGUua2V5KTtcblxuICAgIHJldHVybiB7XG4gICAgICAuLi5wYXJzZWRLZXksXG4gICAgICBrZXlDb2RlOiBrZXlPcktleUNvZGUua2V5Q29kZVxuICAgIH07XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoJ2tleWJvYXJkLnByZXNzS2V5KCkgcmVxdWlyZXMgYSB2YWxpZCBrZXkgb3Iga2V5Q29kZScpO1xufTtcblxuY29uc3QgcGFyc2VLZXkgPSAoa2V5U3RyOiBzdHJpbmcpOiBLZXlPcHRpb25zID0+IHtcbiAgaWYgKGtleVN0ci5pbmRleE9mKCcuJykgPCAwIHx8ICcuJyA9PT0ga2V5U3RyKSB7XG4gICAgcmV0dXJuIHsga2V5OiBrZXlTdHIsIGtleUNvZGU6IGZhbHNlLCBtb2RpZmllcnM6IHt9IH07XG4gIH1cblxuICBjb25zdCBrZXlQYXJ0cyA9IGtleVN0ci5zcGxpdCgnLicpO1xuICBjb25zdCBrZXkgPSBrZXlQYXJ0cy5wb3AoKSBhcyBzdHJpbmc7XG4gIGNvbnN0IG1vZGlmaWVycyA9IGtleVBhcnRzLnJlZHVjZShcbiAgICAobW9kcywgcGFydCkgPT4ge1xuICAgICAgc3dpdGNoIChwYXJ0KSB7XG4gICAgICAgIGNhc2UgJ2NvbnRyb2wnOlxuICAgICAgICBjYXNlICdjdHJsJzpcbiAgICAgICAgICBtb2RzLmNvbnRyb2wgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG1vZHM7XG4gICAgICAgIGNhc2UgJ3NoaWZ0JzpcbiAgICAgICAgICBtb2RzLnNoaWZ0ID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBtb2RzO1xuICAgICAgICBjYXNlICdhbHQnOlxuICAgICAgICAgIG1vZHMuYWx0ID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBtb2RzO1xuICAgICAgICBjYXNlICdtZXRhJzpcbiAgICAgICAgY2FzZSAnY21kJzpcbiAgICAgICAgY2FzZSAnd2luJzpcbiAgICAgICAgICBtb2RzLm1ldGEgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG1vZHM7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGtleSBtb2RpZmllcjogJHtwYXJ0ID8gcGFydCA6ICd1bmRlZmluZWQnfSwga2V5U3RyOiAke2tleVN0cn1gKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHsgYWx0OiBmYWxzZSwgY29udHJvbDogZmFsc2UsIHNoaWZ0OiBmYWxzZSwgbWV0YTogZmFsc2UgfVxuICApO1xuXG4gIHJldHVybiB7IGtleSwga2V5Q29kZTogZmFsc2UsIG1vZGlmaWVycyB9O1xufTtcbiJdfQ==