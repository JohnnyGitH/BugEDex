import { SimpleChange } from '@angular/core';
import { By } from '@angular/platform-browser';
import { DOMSelector } from '../dom-selectors';
import { isString } from '../types';
export function getChildren(debugElementRoot) {
    return (directiveOrSelector, options = { root: false, read: undefined }) => {
        if (directiveOrSelector instanceof DOMSelector) {
            return directiveOrSelector.execute(debugElementRoot.nativeElement);
        }
        const debugElements = debugElementRoot.queryAll(isString(directiveOrSelector) ? By.css(directiveOrSelector) : By.directive(directiveOrSelector));
        if (options.read) {
            return debugElements.map((debug) => debug.injector.get(options.read));
        }
        if (isString(directiveOrSelector)) {
            return debugElements.map((debug) => debug.nativeElement);
        }
        return debugElements.map((debug) => debug.injector.get(directiveOrSelector));
    };
}
export function setProps(instance, keyOrKeyValues, value, firstChange = true) {
    const changes = {};
    const update = (key, newValue) => {
        if (instance[key] !== newValue) {
            changes[key] = new SimpleChange(instance[key], newValue, firstChange);
        }
        instance[key] = newValue;
    };
    if (isString(keyOrKeyValues)) {
        update(keyOrKeyValues, value);
    }
    else {
        // eslint-disable-next-line guard-for-in
        for (const p in keyOrKeyValues) {
            update(p, keyOrKeyValues[p]);
        }
    }
    if (Object.keys(changes).length) {
        // eslint-disable-next-line
        instance.ngOnChanges?.(changes);
    }
    return instance;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zcGVjdGF0b3Ivc3JjL2xpYi9pbnRlcm5hbHMvcXVlcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFnQixZQUFZLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQzFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBMkIsTUFBTSxVQUFVLENBQUM7QUFFN0QsTUFBTSxVQUFVLFdBQVcsQ0FBSSxnQkFBOEI7SUFDM0QsT0FBTyxDQUFDLG1CQUE4QixFQUFFLFVBQTJCLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEVBQU8sRUFBRTtRQUMxRyxJQUFJLG1CQUFtQixZQUFZLFdBQVcsRUFBRTtZQUM5QyxPQUFPLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQVUsQ0FBQztTQUM3RTtRQUVELE1BQU0sYUFBYSxHQUFHLGdCQUFnQixDQUFDLFFBQVEsQ0FDN0MsUUFBUSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUNoRyxDQUFDO1FBRUYsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFO1lBQ2hCLE9BQU8sYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDdkU7UUFFRCxJQUFJLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFO1lBQ2pDLE9BQU8sYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQzFEO1FBRUQsT0FBTyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7SUFDL0UsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQVNELE1BQU0sVUFBVSxRQUFRLENBQUMsUUFBYSxFQUFFLGNBQW1CLEVBQUUsS0FBVyxFQUFFLGNBQXVCLElBQUk7SUFDbkcsTUFBTSxPQUFPLEdBQWtCLEVBQUUsQ0FBQztJQUVsQyxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQVcsRUFBRSxRQUFhLEVBQVEsRUFBRTtRQUNsRCxJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxRQUFRLEVBQUU7WUFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDdkU7UUFFRCxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUMsQ0FBQztJQUVGLElBQUksUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFO1FBQzVCLE1BQU0sQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDL0I7U0FBTTtRQUNMLHdDQUF3QztRQUN4QyxLQUFLLE1BQU0sQ0FBQyxJQUFJLGNBQWMsRUFBRTtZQUM5QixNQUFNLENBQUMsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzlCO0tBQ0Y7SUFFRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFO1FBQy9CLDJCQUEyQjtRQUMzQixRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDakM7SUFFRCxPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVidWdFbGVtZW50LCBTaW1wbGVDaGFuZ2UsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJ5IH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbmltcG9ydCB7IERPTVNlbGVjdG9yIH0gZnJvbSAnLi4vZG9tLXNlbGVjdG9ycyc7XG5pbXBvcnQgeyBpc1N0cmluZywgUXVlcnlPcHRpb25zLCBRdWVyeVR5cGUgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDaGlsZHJlbjxSPihkZWJ1Z0VsZW1lbnRSb290OiBEZWJ1Z0VsZW1lbnQpOiAoZGlyZWN0aXZlT3JTZWxlY3RvcjogUXVlcnlUeXBlLCBvcHRpb25zPzogUXVlcnlPcHRpb25zPFI+KSA9PiBSW10ge1xuICByZXR1cm4gKGRpcmVjdGl2ZU9yU2VsZWN0b3I6IFF1ZXJ5VHlwZSwgb3B0aW9uczogUXVlcnlPcHRpb25zPFI+ID0geyByb290OiBmYWxzZSwgcmVhZDogdW5kZWZpbmVkIH0pOiBSW10gPT4ge1xuICAgIGlmIChkaXJlY3RpdmVPclNlbGVjdG9yIGluc3RhbmNlb2YgRE9NU2VsZWN0b3IpIHtcbiAgICAgIHJldHVybiBkaXJlY3RpdmVPclNlbGVjdG9yLmV4ZWN1dGUoZGVidWdFbGVtZW50Um9vdC5uYXRpdmVFbGVtZW50KSBhcyBhbnlbXTtcbiAgICB9XG5cbiAgICBjb25zdCBkZWJ1Z0VsZW1lbnRzID0gZGVidWdFbGVtZW50Um9vdC5xdWVyeUFsbChcbiAgICAgIGlzU3RyaW5nKGRpcmVjdGl2ZU9yU2VsZWN0b3IpID8gQnkuY3NzKGRpcmVjdGl2ZU9yU2VsZWN0b3IpIDogQnkuZGlyZWN0aXZlKGRpcmVjdGl2ZU9yU2VsZWN0b3IpXG4gICAgKTtcblxuICAgIGlmIChvcHRpb25zLnJlYWQpIHtcbiAgICAgIHJldHVybiBkZWJ1Z0VsZW1lbnRzLm1hcCgoZGVidWcpID0+IGRlYnVnLmluamVjdG9yLmdldChvcHRpb25zLnJlYWQpKTtcbiAgICB9XG5cbiAgICBpZiAoaXNTdHJpbmcoZGlyZWN0aXZlT3JTZWxlY3RvcikpIHtcbiAgICAgIHJldHVybiBkZWJ1Z0VsZW1lbnRzLm1hcCgoZGVidWcpID0+IGRlYnVnLm5hdGl2ZUVsZW1lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWJ1Z0VsZW1lbnRzLm1hcCgoZGVidWcpID0+IGRlYnVnLmluamVjdG9yLmdldChkaXJlY3RpdmVPclNlbGVjdG9yKSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRQcm9wczxULCBLIGV4dGVuZHMgc3RyaW5nIHwgbnVtYmVyIHwgc3ltYm9sLCBWPihcbiAgaW5zdGFuY2U6IFQsXG4gIGtleTogSyxcbiAgdmFsdWU6IFYsXG4gIGZpcnN0Q2hhbmdlPzogYm9vbGVhblxuKTogVCAmIHsgW0tFWSBpbiBLXTogViB9O1xuZXhwb3J0IGZ1bmN0aW9uIHNldFByb3BzPFQsIEtWPihpbnN0YW5jZTogVCwga2V5VmFsdWVzPzogS1YpOiBUICYgS1Y7XG5leHBvcnQgZnVuY3Rpb24gc2V0UHJvcHMoaW5zdGFuY2U6IGFueSwga2V5T3JLZXlWYWx1ZXM6IGFueSwgdmFsdWU/OiBhbnksIGZpcnN0Q2hhbmdlOiBib29sZWFuID0gdHJ1ZSk6IGFueSB7XG4gIGNvbnN0IGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMgPSB7fTtcblxuICBjb25zdCB1cGRhdGUgPSAoa2V5OiBzdHJpbmcsIG5ld1ZhbHVlOiBhbnkpOiB2b2lkID0+IHtcbiAgICBpZiAoaW5zdGFuY2Vba2V5XSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgIGNoYW5nZXNba2V5XSA9IG5ldyBTaW1wbGVDaGFuZ2UoaW5zdGFuY2Vba2V5XSwgbmV3VmFsdWUsIGZpcnN0Q2hhbmdlKTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZVtrZXldID0gbmV3VmFsdWU7XG4gIH07XG5cbiAgaWYgKGlzU3RyaW5nKGtleU9yS2V5VmFsdWVzKSkge1xuICAgIHVwZGF0ZShrZXlPcktleVZhbHVlcywgdmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKGNvbnN0IHAgaW4ga2V5T3JLZXlWYWx1ZXMpIHtcbiAgICAgIHVwZGF0ZShwLCBrZXlPcktleVZhbHVlc1twXSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKE9iamVjdC5rZXlzKGNoYW5nZXMpLmxlbmd0aCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIGluc3RhbmNlLm5nT25DaGFuZ2VzPy4oY2hhbmdlcyk7XG4gIH1cblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG4iXX0=