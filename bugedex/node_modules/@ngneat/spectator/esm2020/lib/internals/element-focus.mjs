import { dispatchFakeEvent } from '../dispatch-events';
import { isRunningInJsDom } from '../utils';
/** Property added to HTML Elements to ensure we don't double-patch focus methods on an element. */
const IS_FOCUS_PATCHED_PROP = Symbol('isFocusPatched');
/** Ensures that a single set of matching focus and blur events occur when HTMLElement.focus() is called. */
class FocusEventWatcher {
    constructor(element) {
        this.element = element;
        /** Set to true when browser sends a blur event for priorActiveElement */
        this._blurred = false;
        /** Set to true when browser sends a focus event for element */
        this._focused = false;
        this.element.addEventListener('focus', this);
        this.priorActiveElement = element.ownerDocument.activeElement;
        this.priorActiveElement?.addEventListener('blur', this);
    }
    handleEvent({ type }) {
        if (type === 'focus') {
            this._focused = true;
        }
        else if (type === 'blur') {
            this._blurred = true;
        }
    }
    /**
     * If focus and blur events haven't occurred, fire fake ones.
     */
    ensureFocusEvents() {
        this.element.removeEventListener('focus', this);
        this.priorActiveElement?.removeEventListener('blur', this);
        // Ensure priorActiveElement is blurred
        if (!this._blurred && this.priorActiveElement) {
            dispatchFakeEvent(this.priorActiveElement, 'blur');
        }
        if (!this._focused) {
            dispatchFakeEvent(this.element, 'focus'); // Needed to cause focus event
        }
    }
}
/**
 * Patches an element's focus and blur methods to emit events consistently and predictably in tests.
 * This is necessary, because some browsers, like IE11, will call the focus handlers asynchronously,
 * while others won't fire them at all if the browser window is not focused.
 *
 * patchElementFocus(triggerEl);
 */
export function patchElementFocus(element) {
    // https://github.com/ngneat/spectator/issues/373 - Don't patch when using JSDOM, eg in Jest
    if (!isRunningInJsDom() && (element[IS_FOCUS_PATCHED_PROP] === undefined)) {
        const originalFocus = element.focus.bind(element);
        element.focus = (options) => {
            const focusEventWatcher = new FocusEventWatcher(element);
            // Sets document.activeElement. May or may not send focus + blur events
            originalFocus(options);
            focusEventWatcher.ensureFocusEvents();
        };
        element.blur = () => dispatchFakeEvent(element, 'blur');
        element[IS_FOCUS_PATCHED_PROP] = true;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC1mb2N1cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3NwZWN0YXRvci9zcmMvbGliL2ludGVybmFscy9lbGVtZW50LWZvY3VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUU1QyxtR0FBbUc7QUFDbkcsTUFBTSxxQkFBcUIsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUV2RCw0R0FBNEc7QUFDNUcsTUFBTSxpQkFBaUI7SUFTckIsWUFBNkIsT0FBb0I7UUFBcEIsWUFBTyxHQUFQLE9BQU8sQ0FBYTtRQUxqRCx5RUFBeUU7UUFDakUsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUN6QiwrREFBK0Q7UUFDdkQsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUd2QixJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUM7UUFDOUQsSUFBSSxDQUFDLGtCQUFrQixFQUFFLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRU0sV0FBVyxDQUFDLEVBQUUsSUFBSSxFQUFTO1FBQ2hDLElBQUksSUFBSSxLQUFLLE9BQU8sRUFBRTtZQUNwQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztTQUN0QjthQUNJLElBQUksSUFBSSxLQUFLLE1BQU0sRUFBRTtZQUN4QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztTQUN0QjtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNJLGlCQUFpQjtRQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsa0JBQWtCLEVBQUUsbUJBQW1CLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRTNELHVDQUF1QztRQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDN0MsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ3BEO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsaUJBQWlCLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLDhCQUE4QjtTQUN6RTtJQUNILENBQUM7Q0FDRjtBQUVEOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxPQUFvQjtJQUVwRCw0RkFBNEY7SUFDNUYsSUFBSSxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsS0FBSyxTQUFTLENBQUMsRUFBRTtRQUN6RSxNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNsRCxPQUFPLENBQUMsS0FBSyxHQUFHLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDMUIsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRXpELHVFQUF1RTtZQUN2RSxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFdkIsaUJBQWlCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN4QyxDQUFDLENBQUE7UUFDRCxPQUFPLENBQUMsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN4RCxPQUFPLENBQUMscUJBQXFCLENBQUMsR0FBRyxJQUFJLENBQUM7S0FDdkM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGlzcGF0Y2hGYWtlRXZlbnQgfSBmcm9tICcuLi9kaXNwYXRjaC1ldmVudHMnO1xuaW1wb3J0IHsgaXNSdW5uaW5nSW5Kc0RvbSB9IGZyb20gJy4uL3V0aWxzJztcblxuLyoqIFByb3BlcnR5IGFkZGVkIHRvIEhUTUwgRWxlbWVudHMgdG8gZW5zdXJlIHdlIGRvbid0IGRvdWJsZS1wYXRjaCBmb2N1cyBtZXRob2RzIG9uIGFuIGVsZW1lbnQuICovXG5jb25zdCBJU19GT0NVU19QQVRDSEVEX1BST1AgPSBTeW1ib2woJ2lzRm9jdXNQYXRjaGVkJyk7XG5cbi8qKiBFbnN1cmVzIHRoYXQgYSBzaW5nbGUgc2V0IG9mIG1hdGNoaW5nIGZvY3VzIGFuZCBibHVyIGV2ZW50cyBvY2N1ciB3aGVuIEhUTUxFbGVtZW50LmZvY3VzKCkgaXMgY2FsbGVkLiAqL1xuY2xhc3MgRm9jdXNFdmVudFdhdGNoZXIgaW1wbGVtZW50cyBFdmVudExpc3RlbmVyT2JqZWN0IHtcblxuICBwcml2YXRlIHJlYWRvbmx5IHByaW9yQWN0aXZlRWxlbWVudDogRWxlbWVudCB8IG51bGw7XG5cbiAgLyoqIFNldCB0byB0cnVlIHdoZW4gYnJvd3NlciBzZW5kcyBhIGJsdXIgZXZlbnQgZm9yIHByaW9yQWN0aXZlRWxlbWVudCAqL1xuICBwcml2YXRlIF9ibHVycmVkID0gZmFsc2U7XG4gIC8qKiBTZXQgdG8gdHJ1ZSB3aGVuIGJyb3dzZXIgc2VuZHMgYSBmb2N1cyBldmVudCBmb3IgZWxlbWVudCAqL1xuICBwcml2YXRlIF9mb2N1c2VkID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMpO1xuICAgIHRoaXMucHJpb3JBY3RpdmVFbGVtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgdGhpcy5wcmlvckFjdGl2ZUVsZW1lbnQ/LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCB0aGlzKTtcbiAgfVxuXG4gIHB1YmxpYyBoYW5kbGVFdmVudCh7IHR5cGUgfTogRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAodHlwZSA9PT0gJ2ZvY3VzJykge1xuICAgICAgdGhpcy5fZm9jdXNlZCA9IHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgPT09ICdibHVyJykge1xuICAgICAgdGhpcy5fYmx1cnJlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIElmIGZvY3VzIGFuZCBibHVyIGV2ZW50cyBoYXZlbid0IG9jY3VycmVkLCBmaXJlIGZha2Ugb25lcy5cbiAgICovXG4gIHB1YmxpYyBlbnN1cmVGb2N1c0V2ZW50cygpIHtcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzKTtcbiAgICB0aGlzLnByaW9yQWN0aXZlRWxlbWVudD8ucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmx1cicsIHRoaXMpO1xuXG4gICAgLy8gRW5zdXJlIHByaW9yQWN0aXZlRWxlbWVudCBpcyBibHVycmVkXG4gICAgaWYgKCF0aGlzLl9ibHVycmVkICYmIHRoaXMucHJpb3JBY3RpdmVFbGVtZW50KSB7XG4gICAgICBkaXNwYXRjaEZha2VFdmVudCh0aGlzLnByaW9yQWN0aXZlRWxlbWVudCwgJ2JsdXInKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX2ZvY3VzZWQpIHtcbiAgICAgIGRpc3BhdGNoRmFrZUV2ZW50KHRoaXMuZWxlbWVudCwgJ2ZvY3VzJyk7IC8vIE5lZWRlZCB0byBjYXVzZSBmb2N1cyBldmVudFxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFBhdGNoZXMgYW4gZWxlbWVudCdzIGZvY3VzIGFuZCBibHVyIG1ldGhvZHMgdG8gZW1pdCBldmVudHMgY29uc2lzdGVudGx5IGFuZCBwcmVkaWN0YWJseSBpbiB0ZXN0cy5cbiAqIFRoaXMgaXMgbmVjZXNzYXJ5LCBiZWNhdXNlIHNvbWUgYnJvd3NlcnMsIGxpa2UgSUUxMSwgd2lsbCBjYWxsIHRoZSBmb2N1cyBoYW5kbGVycyBhc3luY2hyb25vdXNseSxcbiAqIHdoaWxlIG90aGVycyB3b24ndCBmaXJlIHRoZW0gYXQgYWxsIGlmIHRoZSBicm93c2VyIHdpbmRvdyBpcyBub3QgZm9jdXNlZC5cbiAqXG4gKiBwYXRjaEVsZW1lbnRGb2N1cyh0cmlnZ2VyRWwpO1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGF0Y2hFbGVtZW50Rm9jdXMoZWxlbWVudDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vbmduZWF0L3NwZWN0YXRvci9pc3N1ZXMvMzczIC0gRG9uJ3QgcGF0Y2ggd2hlbiB1c2luZyBKU0RPTSwgZWcgaW4gSmVzdFxuICBpZiAoIWlzUnVubmluZ0luSnNEb20oKSAmJiAoZWxlbWVudFtJU19GT0NVU19QQVRDSEVEX1BST1BdID09PSB1bmRlZmluZWQpKSB7XG4gICAgY29uc3Qgb3JpZ2luYWxGb2N1cyA9IGVsZW1lbnQuZm9jdXMuYmluZChlbGVtZW50KTtcbiAgICBlbGVtZW50LmZvY3VzID0gKG9wdGlvbnMpID0+IHtcbiAgICAgIGNvbnN0IGZvY3VzRXZlbnRXYXRjaGVyID0gbmV3IEZvY3VzRXZlbnRXYXRjaGVyKGVsZW1lbnQpO1xuXG4gICAgICAvLyBTZXRzIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuIE1heSBvciBtYXkgbm90IHNlbmQgZm9jdXMgKyBibHVyIGV2ZW50c1xuICAgICAgb3JpZ2luYWxGb2N1cyhvcHRpb25zKTtcblxuICAgICAgZm9jdXNFdmVudFdhdGNoZXIuZW5zdXJlRm9jdXNFdmVudHMoKTtcbiAgICB9XG4gICAgZWxlbWVudC5ibHVyID0gKCkgPT4gZGlzcGF0Y2hGYWtlRXZlbnQoZWxlbWVudCwgJ2JsdXInKTtcbiAgICBlbGVtZW50W0lTX0ZPQ1VTX1BBVENIRURfUFJPUF0gPSB0cnVlO1xuICB9XG59XG4iXX0=