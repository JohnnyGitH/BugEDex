import { TestBed, waitForAsync } from '@angular/core/testing';
import { BrowserDynamicTestingModule } from '@angular/platform-browser-dynamic/testing';
import { setProps } from '../internals/query';
import * as customMatchers from '../matchers';
import { addMatchers } from '../core';
import { isType } from '../types';
import { initialSpectatorPipeModule } from './initial-module';
import { getSpectatorPipeDefaultOptions } from './options';
import { SpectatorPipe } from './spectator-pipe';
import { overrideModules } from '../spectator/create-factory';
/**
 * @publicApi
 */
export function createPipeFactory(typeOrOptions) {
    const options = isType(typeOrOptions)
        ? getSpectatorPipeDefaultOptions({ pipe: typeOrOptions })
        : getSpectatorPipeDefaultOptions(typeOrOptions);
    const moduleMetadata = initialSpectatorPipeModule(options);
    beforeEach(waitForAsync(() => {
        addMatchers(customMatchers);
        TestBed.configureTestingModule(moduleMetadata);
        overrideModules(options);
    }));
    return (templateOrOverrides, overrides) => {
        const defaults = {
            hostProps: {},
            detectChanges: true,
            providers: []
        };
        const resolvedOverrides = typeof templateOrOverrides === 'object' ? templateOrOverrides : overrides;
        const { detectChanges, hostProps, providers } = { ...defaults, ...resolvedOverrides };
        const template = typeof templateOrOverrides === 'string' ? templateOrOverrides : options.template;
        if (providers && providers.length) {
            providers.forEach((provider) => {
                TestBed.overrideProvider(provider.provide, provider);
            });
        }
        if (template) {
            TestBed.overrideModule(BrowserDynamicTestingModule, {
                set: {
                    entryComponents: moduleMetadata.entryComponents
                }
            }).overrideComponent(options.host, {
                set: { template }
            });
        }
        const spectator = createSpectatorPipe(options, hostProps);
        if (options.detectChanges && detectChanges) {
            spectator.detectChanges();
        }
        return spectator;
    };
}
function createSpectatorPipe(options, hostProps) {
    const hostFixture = TestBed.createComponent(options.host);
    const debugElement = hostFixture.debugElement;
    const hostComponent = setProps(hostFixture.componentInstance, hostProps);
    return new SpectatorPipe(hostComponent, hostFixture, hostFixture.debugElement, debugElement.nativeElement);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zcGVjdGF0b3Ivc3JjL2xpYi9zcGVjdGF0b3ItcGlwZS9jcmVhdGUtZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzlELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBRXhGLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM5QyxPQUFPLEtBQUssY0FBYyxNQUFNLGFBQWEsQ0FBQztBQUU5QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFHbEMsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDOUQsT0FBTyxFQUFFLDhCQUE4QixFQUF3QixNQUFNLFdBQVcsQ0FBQztBQUNqRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBa0I5RDs7R0FFRztBQUNILE1BQU0sVUFBVSxpQkFBaUIsQ0FBdUIsYUFBbUQ7SUFDekcsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQUNuQyxDQUFDLENBQUMsOEJBQThCLENBQU8sRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLENBQUM7UUFDL0QsQ0FBQyxDQUFDLDhCQUE4QixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRWxELE1BQU0sY0FBYyxHQUFHLDBCQUEwQixDQUFPLE9BQU8sQ0FBQyxDQUFDO0lBRWpFLFVBQVUsQ0FDUixZQUFZLENBQUMsR0FBRyxFQUFFO1FBQ2hCLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUM1QixPQUFPLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDL0MsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzNCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFFRixPQUFPLENBQUssbUJBQTRELEVBQUUsU0FBeUMsRUFBRSxFQUFFO1FBQ3JILE1BQU0sUUFBUSxHQUFrQztZQUM5QyxTQUFTLEVBQUUsRUFBUztZQUNwQixhQUFhLEVBQUUsSUFBSTtZQUNuQixTQUFTLEVBQUUsRUFBRTtTQUNkLENBQUM7UUFDRixNQUFNLGlCQUFpQixHQUFHLE9BQU8sbUJBQW1CLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3BHLE1BQU0sRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsR0FBRyxRQUFRLEVBQUUsR0FBRyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3RGLE1BQU0sUUFBUSxHQUFHLE9BQU8sbUJBQW1CLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUVsRyxJQUFJLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFO1lBQ2pDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFrQixFQUFFLEVBQUU7Z0JBQ3ZDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBRSxRQUFnQixDQUFDLE9BQU8sRUFBRSxRQUFlLENBQUMsQ0FBQztZQUN2RSxDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsSUFBSSxRQUFRLEVBQUU7WUFDWixPQUFPLENBQUMsY0FBYyxDQUFDLDJCQUEyQixFQUFFO2dCQUNsRCxHQUFHLEVBQUU7b0JBQ0gsZUFBZSxFQUFFLGNBQWMsQ0FBQyxlQUFlO2lCQUNoRDthQUNGLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFO2dCQUNqQyxHQUFHLEVBQUUsRUFBRSxRQUFRLEVBQUU7YUFDbEIsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxNQUFNLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFMUQsSUFBSSxPQUFPLENBQUMsYUFBYSxJQUFJLGFBQWEsRUFBRTtZQUMxQyxTQUFTLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDM0I7UUFFRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxtQkFBbUIsQ0FBVyxPQUE2QyxFQUFFLFNBQWM7SUFDbEcsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUQsTUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFDLFlBQVksQ0FBQztJQUU5QyxNQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLGlCQUFpQixFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRXpFLE9BQU8sSUFBSSxhQUFhLENBQUMsYUFBYSxFQUFFLFdBQVcsRUFBRSxXQUFXLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUM3RyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvdmlkZXIsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRlc3RCZWQsIHdhaXRGb3JBc3luYyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBCcm93c2VyRHluYW1pY1Rlc3RpbmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMvdGVzdGluZyc7XG5cbmltcG9ydCB7IHNldFByb3BzIH0gZnJvbSAnLi4vaW50ZXJuYWxzL3F1ZXJ5JztcbmltcG9ydCAqIGFzIGN1c3RvbU1hdGNoZXJzIGZyb20gJy4uL21hdGNoZXJzJztcbmltcG9ydCB7IEJhc2VTcGVjdGF0b3JPdmVycmlkZXMgfSBmcm9tICcuLi9iYXNlL29wdGlvbnMnO1xuaW1wb3J0IHsgYWRkTWF0Y2hlcnMgfSBmcm9tICcuLi9jb3JlJztcbmltcG9ydCB7IGlzVHlwZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IEhvc3RDb21wb25lbnQgfSBmcm9tICcuLi9zcGVjdGF0b3ItaG9zdC9ob3N0LWNvbXBvbmVudCc7XG5cbmltcG9ydCB7IGluaXRpYWxTcGVjdGF0b3JQaXBlTW9kdWxlIH0gZnJvbSAnLi9pbml0aWFsLW1vZHVsZSc7XG5pbXBvcnQgeyBnZXRTcGVjdGF0b3JQaXBlRGVmYXVsdE9wdGlvbnMsIFNwZWN0YXRvclBpcGVPcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zJztcbmltcG9ydCB7IFNwZWN0YXRvclBpcGUgfSBmcm9tICcuL3NwZWN0YXRvci1waXBlJztcbmltcG9ydCB7IG92ZXJyaWRlTW9kdWxlcyB9IGZyb20gJy4uL3NwZWN0YXRvci9jcmVhdGUtZmFjdG9yeSc7XG5cbi8qKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgdHlwZSBTcGVjdGF0b3JQaXBlRmFjdG9yeTxQLCBIPiA9IDxIUD4oXG4gIHRlbXBsYXRlT3JPdmVycmlkZXM/OiBzdHJpbmcgfCBTcGVjdGF0b3JQaXBlT3ZlcnJpZGVzPEgsIEhQPixcbiAgb3ZlcnJpZGVzPzogU3BlY3RhdG9yUGlwZU92ZXJyaWRlczxILCBIUD5cbikgPT4gU3BlY3RhdG9yUGlwZTxQLCBIICYgKEhvc3RDb21wb25lbnQgZXh0ZW5kcyBIID8gSFAgOiB1bmtub3duKT47XG5cbi8qKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNwZWN0YXRvclBpcGVPdmVycmlkZXM8SCwgSFA+IGV4dGVuZHMgQmFzZVNwZWN0YXRvck92ZXJyaWRlcyB7XG4gIGRldGVjdENoYW5nZXM/OiBib29sZWFuO1xuICBob3N0UHJvcHM/OiBIb3N0Q29tcG9uZW50IGV4dGVuZHMgSCA/IEhQIDogUGFydGlhbDxIPjtcbn1cblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQaXBlRmFjdG9yeTxQLCBIID0gSG9zdENvbXBvbmVudD4odHlwZU9yT3B0aW9uczogVHlwZTxQPiB8IFNwZWN0YXRvclBpcGVPcHRpb25zPFAsIEg+KTogU3BlY3RhdG9yUGlwZUZhY3Rvcnk8UCwgSD4ge1xuICBjb25zdCBvcHRpb25zID0gaXNUeXBlKHR5cGVPck9wdGlvbnMpXG4gICAgPyBnZXRTcGVjdGF0b3JQaXBlRGVmYXVsdE9wdGlvbnM8UCwgSD4oeyBwaXBlOiB0eXBlT3JPcHRpb25zIH0pXG4gICAgOiBnZXRTcGVjdGF0b3JQaXBlRGVmYXVsdE9wdGlvbnModHlwZU9yT3B0aW9ucyk7XG5cbiAgY29uc3QgbW9kdWxlTWV0YWRhdGEgPSBpbml0aWFsU3BlY3RhdG9yUGlwZU1vZHVsZTxQLCBIPihvcHRpb25zKTtcblxuICBiZWZvcmVFYWNoKFxuICAgIHdhaXRGb3JBc3luYygoKSA9PiB7XG4gICAgICBhZGRNYXRjaGVycyhjdXN0b21NYXRjaGVycyk7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUobW9kdWxlTWV0YWRhdGEpO1xuICAgICAgb3ZlcnJpZGVNb2R1bGVzKG9wdGlvbnMpO1xuICAgIH0pXG4gICk7XG5cbiAgcmV0dXJuIDxIUD4odGVtcGxhdGVPck92ZXJyaWRlcz86IHN0cmluZyB8IFNwZWN0YXRvclBpcGVPdmVycmlkZXM8SCwgSFA+LCBvdmVycmlkZXM/OiBTcGVjdGF0b3JQaXBlT3ZlcnJpZGVzPEgsIEhQPikgPT4ge1xuICAgIGNvbnN0IGRlZmF1bHRzOiBTcGVjdGF0b3JQaXBlT3ZlcnJpZGVzPEgsIEhQPiA9IHtcbiAgICAgIGhvc3RQcm9wczoge30gYXMgYW55LFxuICAgICAgZGV0ZWN0Q2hhbmdlczogdHJ1ZSxcbiAgICAgIHByb3ZpZGVyczogW11cbiAgICB9O1xuICAgIGNvbnN0IHJlc29sdmVkT3ZlcnJpZGVzID0gdHlwZW9mIHRlbXBsYXRlT3JPdmVycmlkZXMgPT09ICdvYmplY3QnID8gdGVtcGxhdGVPck92ZXJyaWRlcyA6IG92ZXJyaWRlcztcbiAgICBjb25zdCB7IGRldGVjdENoYW5nZXMsIGhvc3RQcm9wcywgcHJvdmlkZXJzIH0gPSB7IC4uLmRlZmF1bHRzLCAuLi5yZXNvbHZlZE92ZXJyaWRlcyB9O1xuICAgIGNvbnN0IHRlbXBsYXRlID0gdHlwZW9mIHRlbXBsYXRlT3JPdmVycmlkZXMgPT09ICdzdHJpbmcnID8gdGVtcGxhdGVPck92ZXJyaWRlcyA6IG9wdGlvbnMudGVtcGxhdGU7XG5cbiAgICBpZiAocHJvdmlkZXJzICYmIHByb3ZpZGVycy5sZW5ndGgpIHtcbiAgICAgIHByb3ZpZGVycy5mb3JFYWNoKChwcm92aWRlcjogUHJvdmlkZXIpID0+IHtcbiAgICAgICAgVGVzdEJlZC5vdmVycmlkZVByb3ZpZGVyKChwcm92aWRlciBhcyBhbnkpLnByb3ZpZGUsIHByb3ZpZGVyIGFzIGFueSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgIFRlc3RCZWQub3ZlcnJpZGVNb2R1bGUoQnJvd3NlckR5bmFtaWNUZXN0aW5nTW9kdWxlLCB7XG4gICAgICAgIHNldDoge1xuICAgICAgICAgIGVudHJ5Q29tcG9uZW50czogbW9kdWxlTWV0YWRhdGEuZW50cnlDb21wb25lbnRzXG4gICAgICAgIH1cbiAgICAgIH0pLm92ZXJyaWRlQ29tcG9uZW50KG9wdGlvbnMuaG9zdCwge1xuICAgICAgICBzZXQ6IHsgdGVtcGxhdGUgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3BlY3RhdG9yID0gY3JlYXRlU3BlY3RhdG9yUGlwZShvcHRpb25zLCBob3N0UHJvcHMpO1xuXG4gICAgaWYgKG9wdGlvbnMuZGV0ZWN0Q2hhbmdlcyAmJiBkZXRlY3RDaGFuZ2VzKSB7XG4gICAgICBzcGVjdGF0b3IuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cblxuICAgIHJldHVybiBzcGVjdGF0b3I7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNwZWN0YXRvclBpcGU8UCwgSCwgSFA+KG9wdGlvbnM6IFJlcXVpcmVkPFNwZWN0YXRvclBpcGVPcHRpb25zPFAsIEg+PiwgaG9zdFByb3BzPzogSFApOiBTcGVjdGF0b3JQaXBlPFAsIEggJiBIUD4ge1xuICBjb25zdCBob3N0Rml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KG9wdGlvbnMuaG9zdCk7XG4gIGNvbnN0IGRlYnVnRWxlbWVudCA9IGhvc3RGaXh0dXJlLmRlYnVnRWxlbWVudDtcblxuICBjb25zdCBob3N0Q29tcG9uZW50ID0gc2V0UHJvcHMoaG9zdEZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2UsIGhvc3RQcm9wcyk7XG5cbiAgcmV0dXJuIG5ldyBTcGVjdGF0b3JQaXBlKGhvc3RDb21wb25lbnQsIGhvc3RGaXh0dXJlLCBob3N0Rml4dHVyZS5kZWJ1Z0VsZW1lbnQsIGRlYnVnRWxlbWVudC5uYXRpdmVFbGVtZW50KTtcbn1cbiJdfQ==