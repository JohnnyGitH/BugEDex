import { Spectator } from '../spectator/spectator';
import { isRouterStub } from './router-stub';
/**
 * @publicApi
 */
export class SpectatorRouting extends Spectator {
    constructor(fixture, debugElement, instance, router, activatedRouteStub) {
        super(fixture, debugElement, instance, debugElement.nativeElement);
        this.router = router;
        this.activatedRouteStub = activatedRouteStub;
    }
    /**
     * Simulates a route navigation by updating the Params, QueryParams and Data observable streams.
     */
    triggerNavigation(options) {
        if (!this.checkStubPresent()) {
            return;
        }
        if (options && options.params) {
            this.activatedRouteStub.setParams(options.params);
        }
        if (options && options.queryParams) {
            this.activatedRouteStub.setQueryParams(options.queryParams);
        }
        if (options && options.data) {
            this.activatedRouteStub.setAllData(options.data);
        }
        if (options && options.fragment) {
            this.activatedRouteStub.setFragment(options.fragment);
        }
        this.triggerNavigationAndUpdate();
    }
    /**
     * Updates the route params and triggers a route navigation.
     */
    setRouteParam(name, value) {
        if (this.checkStubPresent()) {
            this.activatedRouteStub.setParam(name, value);
            this.triggerNavigationAndUpdate();
        }
    }
    /**
     * Updates the route query params and triggers a route navigation.
     */
    setRouteQueryParam(name, value) {
        if (this.checkStubPresent()) {
            this.activatedRouteStub.setQueryParam(name, value);
            this.triggerNavigationAndUpdate();
        }
    }
    /**
     * Updates the route data and triggers a route navigation.
     * The `value` is typed as `any` since the `Route#data` is a record with `any` values.
     * There's no sense to make it generic until `Route#data` starts supporting generic types.
     */
    setRouteData(name, value) {
        if (this.checkStubPresent()) {
            this.activatedRouteStub.setData(name, value);
            this.triggerNavigationAndUpdate();
        }
    }
    /**
     * Updates the route fragment and triggers a route navigation.
     */
    setRouteFragment(fragment) {
        if (this.checkStubPresent()) {
            this.activatedRouteStub.setFragment(fragment);
            this.triggerNavigationAndUpdate();
        }
    }
    /**
     * Updates the route url and triggers a route navigation.
     */
    setRouteUrl(url) {
        if (this.checkStubPresent()) {
            this.activatedRouteStub.setUrl(url);
            this.triggerNavigationAndUpdate();
        }
    }
    /**
     * Emits a router event
     */
    emitRouterEvent(event) {
        if (!isRouterStub(this.router)) {
            // eslint-disable-next-line no-console
            console.warn('No stub for Router present. Set Spectator option "stubsEnabled" to true if you want to use this ' +
                'helper, or use Router navigation to trigger events.');
            return;
        }
        this.router.emitRouterEvent(event);
    }
    triggerNavigationAndUpdate() {
        this.activatedRouteStub.triggerNavigation();
        this.detectChanges();
    }
    checkStubPresent() {
        if (!this.activatedRouteStub) {
            // eslint-disable-next-line no-console
            console.warn('No stub for ActivatedRoute present. Set Spectator option "stubsEnabled" to true if you want to use this ' +
                'helper, or use Router to trigger navigation.');
            return false;
        }
        return true;
    }
}
//# sourceMappingURL=data:application/json;base64,