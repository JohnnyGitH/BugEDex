import { TestBed, waitForAsync } from '@angular/core/testing';
import { By } from '@angular/platform-browser';
import { BrowserDynamicTestingModule } from '@angular/platform-browser-dynamic/testing';
import { setProps } from '../internals/query';
import * as customMatchers from '../matchers';
import { overrideComponentIfProviderOverridesSpecified, overrideModules } from '../spectator/create-factory';
import { addMatchers } from '../core';
import { isType } from '../types';
import { nodeByDirective } from '../internals/node-by-directive';
import { initialSpectatorWithHostModule } from './initial-module';
import { getSpectatorHostDefaultOptions } from './options';
import { SpectatorHost } from './spectator-host';
export function createHostFactory(typeOrOptions) {
    const options = isType(typeOrOptions)
        ? getSpectatorHostDefaultOptions({ component: typeOrOptions })
        : getSpectatorHostDefaultOptions(typeOrOptions);
    const moduleMetadata = initialSpectatorWithHostModule(options);
    beforeEach(waitForAsync(() => {
        addMatchers(customMatchers);
        TestBed.configureTestingModule(moduleMetadata).overrideModule(BrowserDynamicTestingModule, {
            set: {
                entryComponents: moduleMetadata.entryComponents
            }
        });
        overrideModules(options);
        overrideComponentIfProviderOverridesSpecified(options);
        if (options.template) {
            TestBed.overrideComponent(options.host, {
                set: { template: options.template }
            });
        }
    }));
    return (template, overrides) => {
        const defaults = { props: {}, hostProps: {}, detectChanges: true, providers: [] };
        const { detectChanges, props, hostProps, providers } = { ...defaults, ...overrides };
        if (providers && providers.length) {
            providers.forEach((provider) => {
                TestBed.overrideProvider(provider.provide, provider);
            });
        }
        if (template) {
            TestBed.overrideComponent(options.host, {
                set: { template: template }
            });
        }
        const spectator = createSpectatorHost(options, props, hostProps);
        if (options.detectChanges && detectChanges) {
            spectator.detectChanges();
        }
        return spectator;
    };
}
function createSpectatorHost(options, props, hostProps) {
    const hostFixture = TestBed.createComponent(options.host);
    const debugElement = hostFixture.debugElement.query(By.directive(options.component)) || hostFixture.debugElement;
    const debugNode = hostFixture.debugElement.queryAllNodes(nodeByDirective(options.component))[0];
    if (!debugNode) {
        throw new Error(`Cannot find component/directive ${options.component} in host template ðŸ˜”`);
    }
    const hostComponent = setProps(hostFixture.componentInstance, hostProps);
    const component = setProps(debugNode.injector.get(options.component), props);
    return new SpectatorHost(hostComponent, hostFixture.debugElement, hostFixture.nativeElement, hostFixture, debugElement, component, debugElement.nativeElement);
}
//# sourceMappingURL=data:application/json;base64,