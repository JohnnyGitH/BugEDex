import { TestBed } from '@angular/core/testing';
import { isType, doesServiceImplementsOnDestroy } from '../types';
import { initialServiceModule } from './initial-module';
import { getDefaultServiceOptions } from './options';
import { SpectatorService } from './spectator-service';
import { overrideModules } from '../spectator/create-factory';
/**
 * @publicApi
 */
export function createServiceFactory(typeOrOptions) {
    const service = isType(typeOrOptions) ? typeOrOptions : typeOrOptions.service;
    const options = isType(typeOrOptions) ? getDefaultServiceOptions({ service }) : getDefaultServiceOptions(typeOrOptions);
    const moduleMetadata = initialServiceModule(options);
    beforeEach(() => {
        TestBed.configureTestingModule(moduleMetadata);
        overrideModules(options);
    });
    afterEach(() => {
        const testedService = TestBed.inject
            ? TestBed.inject(service)
            : TestBed.get(service);
        if (doesServiceImplementsOnDestroy(testedService)) {
            // eslint-disable-next-line
            testedService.ngOnDestroy();
        }
    });
    return (overrides) => {
        const defaults = { providers: [] };
        const { providers } = { ...defaults, ...overrides };
        if (providers && providers.length) {
            providers.forEach((provider) => {
                TestBed.overrideProvider(provider.provide, provider);
            });
        }
        return new SpectatorService(TestBed.inject ? TestBed.inject(service) : TestBed.get(service));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zcGVjdGF0b3Ivc3JjL2xpYi9zcGVjdGF0b3Itc2VydmljZS9jcmVhdGUtZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsT0FBTyxFQUFpQixNQUFNLHVCQUF1QixDQUFDO0FBRy9ELE9BQU8sRUFBRSxNQUFNLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFbEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDeEQsT0FBTyxFQUFFLHdCQUF3QixFQUEyQixNQUFNLFdBQVcsQ0FBQztBQUM5RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFhOUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsb0JBQW9CLENBQUksYUFBbUQ7SUFDekYsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUM7SUFDOUUsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyx3QkFBd0IsQ0FBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRTNILE1BQU0sY0FBYyxHQUFHLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXJELFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxPQUFPLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDL0MsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzNCLENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sYUFBYSxHQUFTLE9BQVEsQ0FBQyxNQUFNO1lBQ3pDLENBQUMsQ0FBdUUsT0FBUSxDQUFDLE1BQU0sQ0FBSSxPQUFPLENBQUM7WUFDbkcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFekIsSUFBSSw4QkFBOEIsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUNqRCwyQkFBMkI7WUFDM0IsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQzdCO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLENBQUMsU0FBd0MsRUFBRSxFQUFFO1FBQ2xELE1BQU0sUUFBUSxHQUFpQyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUNqRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxHQUFHLFFBQVEsRUFBRSxHQUFHLFNBQVMsRUFBRSxDQUFDO1FBRXBELElBQUksU0FBUyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUU7WUFDakMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQWtCLEVBQUUsRUFBRTtnQkFDdkMsT0FBTyxDQUFDLGdCQUFnQixDQUFFLFFBQWdCLENBQUMsT0FBTyxFQUFFLFFBQWUsQ0FBQyxDQUFDO1lBQ3ZFLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxPQUFPLElBQUksZ0JBQWdCLENBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2xHLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm92aWRlciwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGVzdEJlZCwgVGVzdEJlZFN0YXRpYyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5cbmltcG9ydCB7IEJhc2VTcGVjdGF0b3JPdmVycmlkZXMgfSBmcm9tICcuLi9iYXNlL29wdGlvbnMnO1xuaW1wb3J0IHsgaXNUeXBlLCBkb2VzU2VydmljZUltcGxlbWVudHNPbkRlc3Ryb3kgfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCB7IGluaXRpYWxTZXJ2aWNlTW9kdWxlIH0gZnJvbSAnLi9pbml0aWFsLW1vZHVsZSc7XG5pbXBvcnQgeyBnZXREZWZhdWx0U2VydmljZU9wdGlvbnMsIFNwZWN0YXRvclNlcnZpY2VPcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zJztcbmltcG9ydCB7IFNwZWN0YXRvclNlcnZpY2UgfSBmcm9tICcuL3NwZWN0YXRvci1zZXJ2aWNlJztcbmltcG9ydCB7IG92ZXJyaWRlTW9kdWxlcyB9IGZyb20gJy4uL3NwZWN0YXRvci9jcmVhdGUtZmFjdG9yeSc7XG5cbi8qKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgdHlwZSBTcGVjdGF0b3JTZXJ2aWNlRmFjdG9yeTxTPiA9IChvdmVycmlkZXM/OiBTcGVjdGF0b3JTZXJ2aWNlT3ZlcnJpZGVzPFM+KSA9PiBTcGVjdGF0b3JTZXJ2aWNlPFM+O1xuXG4vKipcbiAqIEBwdWJsaWNBcGlcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1pbnRlcmZhY2VcbmV4cG9ydCBpbnRlcmZhY2UgU3BlY3RhdG9yU2VydmljZU92ZXJyaWRlczxTPiBleHRlbmRzIEJhc2VTcGVjdGF0b3JPdmVycmlkZXMge31cblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZXJ2aWNlRmFjdG9yeTxTPih0eXBlT3JPcHRpb25zOiBUeXBlPFM+IHwgU3BlY3RhdG9yU2VydmljZU9wdGlvbnM8Uz4pOiBTcGVjdGF0b3JTZXJ2aWNlRmFjdG9yeTxTPiB7XG4gIGNvbnN0IHNlcnZpY2UgPSBpc1R5cGUodHlwZU9yT3B0aW9ucykgPyB0eXBlT3JPcHRpb25zIDogdHlwZU9yT3B0aW9ucy5zZXJ2aWNlO1xuICBjb25zdCBvcHRpb25zID0gaXNUeXBlKHR5cGVPck9wdGlvbnMpID8gZ2V0RGVmYXVsdFNlcnZpY2VPcHRpb25zPFM+KHsgc2VydmljZSB9KSA6IGdldERlZmF1bHRTZXJ2aWNlT3B0aW9ucyh0eXBlT3JPcHRpb25zKTtcblxuICBjb25zdCBtb2R1bGVNZXRhZGF0YSA9IGluaXRpYWxTZXJ2aWNlTW9kdWxlKG9wdGlvbnMpO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZShtb2R1bGVNZXRhZGF0YSk7XG4gICAgb3ZlcnJpZGVNb2R1bGVzKG9wdGlvbnMpO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGNvbnN0IHRlc3RlZFNlcnZpY2UgPSAoPGFueT5UZXN0QmVkKS5pbmplY3RcbiAgICAgID8gKDx7IGluamVjdDxUPih0b2tlbjogVHlwZTxUPiwgbm90Rm91bmRWYWx1ZT86IFQpOiBUIH0gJiBUZXN0QmVkU3RhdGljPlRlc3RCZWQpLmluamVjdDxTPihzZXJ2aWNlKVxuICAgICAgOiBUZXN0QmVkLmdldChzZXJ2aWNlKTtcblxuICAgIGlmIChkb2VzU2VydmljZUltcGxlbWVudHNPbkRlc3Ryb3kodGVzdGVkU2VydmljZSkpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgdGVzdGVkU2VydmljZS5uZ09uRGVzdHJveSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIChvdmVycmlkZXM/OiBTcGVjdGF0b3JTZXJ2aWNlT3ZlcnJpZGVzPFM+KSA9PiB7XG4gICAgY29uc3QgZGVmYXVsdHM6IFNwZWN0YXRvclNlcnZpY2VPdmVycmlkZXM8Uz4gPSB7IHByb3ZpZGVyczogW10gfTtcbiAgICBjb25zdCB7IHByb3ZpZGVycyB9ID0geyAuLi5kZWZhdWx0cywgLi4ub3ZlcnJpZGVzIH07XG5cbiAgICBpZiAocHJvdmlkZXJzICYmIHByb3ZpZGVycy5sZW5ndGgpIHtcbiAgICAgIHByb3ZpZGVycy5mb3JFYWNoKChwcm92aWRlcjogUHJvdmlkZXIpID0+IHtcbiAgICAgICAgVGVzdEJlZC5vdmVycmlkZVByb3ZpZGVyKChwcm92aWRlciBhcyBhbnkpLnByb3ZpZGUsIHByb3ZpZGVyIGFzIGFueSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFNwZWN0YXRvclNlcnZpY2U8Uz4oVGVzdEJlZC5pbmplY3QgPyBUZXN0QmVkLmluamVjdChzZXJ2aWNlKSA6IFRlc3RCZWQuZ2V0KHNlcnZpY2UpKTtcbiAgfTtcbn1cbiJdfQ==