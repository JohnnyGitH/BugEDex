import { HttpClient } from '@angular/common/http';
import { HttpTestingController } from '@angular/common/http/testing';
import { TestBed } from '@angular/core/testing';
import { isType } from '../types';
import { initialHttpModule } from './initial-module';
import { getDefaultHttpOptions } from './options';
import { SpectatorHttp } from './spectator-http';
import { overrideModules } from '../spectator/create-factory';
/**
 * @publicApi
 */
export function createHttpFactory(typeOrOptions) {
    const service = isType(typeOrOptions) ? typeOrOptions : typeOrOptions.service;
    const options = isType(typeOrOptions) ? getDefaultHttpOptions({ service }) : getDefaultHttpOptions(typeOrOptions);
    const moduleMetadata = initialHttpModule(options);
    beforeEach(() => {
        TestBed.configureTestingModule(moduleMetadata);
        overrideModules(options);
    });
    afterEach(() => {
        if (TestBed.inject) {
            TestBed.inject(HttpTestingController).verify();
        }
        else {
            TestBed.get(HttpTestingController).verify();
        }
    });
    return (overrides) => {
        const defaults = { providers: [] };
        const { providers } = { ...defaults, ...overrides };
        if (providers && providers.length) {
            providers.forEach((provider) => {
                TestBed.overrideProvider(provider.provide, provider);
            });
        }
        /**
         * Back compatibility, angular under 9 version doesnt have a inject function
         */
        if (!TestBed.inject) {
            return new SpectatorHttp(TestBed.get(service), TestBed.get(HttpClient), TestBed.get(HttpTestingController));
        }
        return new SpectatorHttp(TestBed.inject(service), TestBed.inject(HttpClient), TestBed.inject(HttpTestingController));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zcGVjdGF0b3Ivc3JjL2xpYi9zcGVjdGF0b3ItaHR0cC9jcmVhdGUtZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFckUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBR2hELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFbEMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDckQsT0FBTyxFQUFFLHFCQUFxQixFQUF3QixNQUFNLFdBQVcsQ0FBQztBQUN4RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBYTlEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGlCQUFpQixDQUFJLGFBQWdEO0lBQ25GLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDO0lBQzlFLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNySCxNQUFNLGNBQWMsR0FBRyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUVsRCxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsT0FBTyxDQUFDLHNCQUFzQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQy9DLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztJQUVILFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDYixJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDbEIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ2hEO2FBQU07WUFDTCxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDN0M7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sQ0FBQyxTQUFrQyxFQUFFLEVBQUU7UUFDNUMsTUFBTSxRQUFRLEdBQTJCLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQzNELE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLEdBQUcsUUFBUSxFQUFFLEdBQUcsU0FBUyxFQUFFLENBQUM7UUFFcEQsSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sRUFBRTtZQUNqQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBa0IsRUFBRSxFQUFFO2dCQUN2QyxPQUFPLENBQUMsZ0JBQWdCLENBQUUsUUFBZ0IsQ0FBQyxPQUFPLEVBQUUsUUFBZSxDQUFDLENBQUM7WUFDdkUsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVEOztXQUVHO1FBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDbkIsT0FBTyxJQUFJLGFBQWEsQ0FBSSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7U0FDaEg7UUFFRCxPQUFPLElBQUksYUFBYSxDQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztJQUMxSCxDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEh0dHBUZXN0aW5nQ29udHJvbGxlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwL3Rlc3RpbmcnO1xuaW1wb3J0IHsgUHJvdmlkZXIsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRlc3RCZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuXG5pbXBvcnQgeyBCYXNlU3BlY3RhdG9yT3ZlcnJpZGVzIH0gZnJvbSAnLi4vYmFzZS9vcHRpb25zJztcbmltcG9ydCB7IGlzVHlwZSB9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IHsgaW5pdGlhbEh0dHBNb2R1bGUgfSBmcm9tICcuL2luaXRpYWwtbW9kdWxlJztcbmltcG9ydCB7IGdldERlZmF1bHRIdHRwT3B0aW9ucywgU3BlY3RhdG9ySHR0cE9wdGlvbnMgfSBmcm9tICcuL29wdGlvbnMnO1xuaW1wb3J0IHsgU3BlY3RhdG9ySHR0cCB9IGZyb20gJy4vc3BlY3RhdG9yLWh0dHAnO1xuaW1wb3J0IHsgb3ZlcnJpZGVNb2R1bGVzIH0gZnJvbSAnLi4vc3BlY3RhdG9yL2NyZWF0ZS1mYWN0b3J5JztcblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCB0eXBlIFNwZWN0YXRvckh0dHBGYWN0b3J5PFM+ID0gKG92ZXJyaWRlcz86IENyZWF0ZUh0dHBPdmVycmlkZXM8Uz4pID0+IFNwZWN0YXRvckh0dHA8Uz47XG5cbi8qKlxuICogQHB1YmxpY0FwaVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWludGVyZmFjZVxuZXhwb3J0IGludGVyZmFjZSBDcmVhdGVIdHRwT3ZlcnJpZGVzPFM+IGV4dGVuZHMgQmFzZVNwZWN0YXRvck92ZXJyaWRlcyB7fVxuXG4vKipcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUh0dHBGYWN0b3J5PFM+KHR5cGVPck9wdGlvbnM6IFR5cGU8Uz4gfCBTcGVjdGF0b3JIdHRwT3B0aW9uczxTPik6IFNwZWN0YXRvckh0dHBGYWN0b3J5PFM+IHtcbiAgY29uc3Qgc2VydmljZSA9IGlzVHlwZSh0eXBlT3JPcHRpb25zKSA/IHR5cGVPck9wdGlvbnMgOiB0eXBlT3JPcHRpb25zLnNlcnZpY2U7XG4gIGNvbnN0IG9wdGlvbnMgPSBpc1R5cGUodHlwZU9yT3B0aW9ucykgPyBnZXREZWZhdWx0SHR0cE9wdGlvbnM8Uz4oeyBzZXJ2aWNlIH0pIDogZ2V0RGVmYXVsdEh0dHBPcHRpb25zKHR5cGVPck9wdGlvbnMpO1xuICBjb25zdCBtb2R1bGVNZXRhZGF0YSA9IGluaXRpYWxIdHRwTW9kdWxlKG9wdGlvbnMpO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZShtb2R1bGVNZXRhZGF0YSk7XG4gICAgb3ZlcnJpZGVNb2R1bGVzKG9wdGlvbnMpO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGlmIChUZXN0QmVkLmluamVjdCkge1xuICAgICAgVGVzdEJlZC5pbmplY3QoSHR0cFRlc3RpbmdDb250cm9sbGVyKS52ZXJpZnkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgVGVzdEJlZC5nZXQoSHR0cFRlc3RpbmdDb250cm9sbGVyKS52ZXJpZnkoKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiAob3ZlcnJpZGVzPzogQ3JlYXRlSHR0cE92ZXJyaWRlczxTPikgPT4ge1xuICAgIGNvbnN0IGRlZmF1bHRzOiBDcmVhdGVIdHRwT3ZlcnJpZGVzPFM+ID0geyBwcm92aWRlcnM6IFtdIH07XG4gICAgY29uc3QgeyBwcm92aWRlcnMgfSA9IHsgLi4uZGVmYXVsdHMsIC4uLm92ZXJyaWRlcyB9O1xuXG4gICAgaWYgKHByb3ZpZGVycyAmJiBwcm92aWRlcnMubGVuZ3RoKSB7XG4gICAgICBwcm92aWRlcnMuZm9yRWFjaCgocHJvdmlkZXI6IFByb3ZpZGVyKSA9PiB7XG4gICAgICAgIFRlc3RCZWQub3ZlcnJpZGVQcm92aWRlcigocHJvdmlkZXIgYXMgYW55KS5wcm92aWRlLCBwcm92aWRlciBhcyBhbnkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQmFjayBjb21wYXRpYmlsaXR5LCBhbmd1bGFyIHVuZGVyIDkgdmVyc2lvbiBkb2VzbnQgaGF2ZSBhIGluamVjdCBmdW5jdGlvblxuICAgICAqL1xuICAgIGlmICghVGVzdEJlZC5pbmplY3QpIHtcbiAgICAgIHJldHVybiBuZXcgU3BlY3RhdG9ySHR0cDxTPihUZXN0QmVkLmdldChzZXJ2aWNlKSwgVGVzdEJlZC5nZXQoSHR0cENsaWVudCksIFRlc3RCZWQuZ2V0KEh0dHBUZXN0aW5nQ29udHJvbGxlcikpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgU3BlY3RhdG9ySHR0cDxTPihUZXN0QmVkLmluamVjdChzZXJ2aWNlKSwgVGVzdEJlZC5pbmplY3QoSHR0cENsaWVudCksIFRlc3RCZWQuaW5qZWN0KEh0dHBUZXN0aW5nQ29udHJvbGxlcikpO1xuICB9O1xufVxuIl19