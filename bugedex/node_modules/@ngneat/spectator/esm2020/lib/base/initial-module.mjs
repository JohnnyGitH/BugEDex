import { NoopAnimationsModule } from '@angular/platform-browser/animations';
import { getGlobalsInjections } from '../globals-injections';
/**
 * @internal
 */
export function initialModule(options) {
    const globals = { imports: [], declarations: [], providers: [], ...getGlobalsInjections() };
    return {
        declarations: [...globals.declarations, ...options.declarations, ...options.entryComponents],
        imports: [...(options.disableAnimations ? [NoopAnimationsModule] : []), ...globals.imports, ...options.imports],
        providers: [...globals.providers, ...options.providers, ...options.mocks.map((type) => options.mockProvider(type))],
        entryComponents: [...options.entryComponents],
        teardown: 
        // Caretaker note: we don't want to merge the `globals.teardown` and `options.teardown`, since `options.teardown`
        // is always defined. If the user calls `defineGlobalsInjections({ teardown: { ... } })` and we merge it with
        // `options.teardown`, then `options.teardown` will always override global options.
        { ...(globals.teardown || options.teardown) },
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdGlhbC1tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zcGVjdGF0b3Ivc3JjL2xpYi9iYXNlL2luaXRpYWwtbW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBRTVFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBZ0I3RDs7R0FFRztBQUNILE1BQU0sVUFBVSxhQUFhLENBQUMsT0FBdUM7SUFDbkUsTUFBTSxPQUFPLEdBQUcsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxHQUFHLG9CQUFvQixFQUFFLEVBQUUsQ0FBQztJQUU1RixPQUFPO1FBQ0wsWUFBWSxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsWUFBWSxFQUFFLEdBQUcsT0FBTyxDQUFDLFlBQVksRUFBRSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUM7UUFDNUYsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxPQUFPLEVBQUUsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQy9HLFNBQVMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLFNBQVMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxTQUFTLEVBQUUsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ25ILGVBQWUsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQztRQUM3QyxRQUFRO1FBQ04saUhBQWlIO1FBQ2pILDZHQUE2RztRQUM3RyxtRkFBbUY7UUFDbkYsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7S0FDaEQsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTY2hlbWFNZXRhZGF0YSwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTW9kdWxlVGVhcmRvd25PcHRpb25zIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcbmltcG9ydCB7IE5vb3BBbmltYXRpb25zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci9hbmltYXRpb25zJztcblxuaW1wb3J0IHsgZ2V0R2xvYmFsc0luamVjdGlvbnMgfSBmcm9tICcuLi9nbG9iYWxzLWluamVjdGlvbnMnO1xuXG5pbXBvcnQgeyBCYXNlU3BlY3RhdG9yT3B0aW9ucyB9IGZyb20gJy4vb3B0aW9ucyc7XG5cbi8qKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1vZHVsZU1ldGFkYXRhIHtcbiAgZGVjbGFyYXRpb25zOiBhbnlbXTtcbiAgaW1wb3J0czogYW55W107XG4gIHByb3ZpZGVyczogYW55W107XG4gIGVudHJ5Q29tcG9uZW50czogVHlwZTxhbnk+W107XG4gIHNjaGVtYXM/OiAoU2NoZW1hTWV0YWRhdGEgfCBhbnlbXSlbXTtcbiAgdGVhcmRvd24/OiBNb2R1bGVUZWFyZG93bk9wdGlvbnM7XG59XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsTW9kdWxlKG9wdGlvbnM6IFJlcXVpcmVkPEJhc2VTcGVjdGF0b3JPcHRpb25zPik6IE1vZHVsZU1ldGFkYXRhIHtcbiAgY29uc3QgZ2xvYmFscyA9IHsgaW1wb3J0czogW10sIGRlY2xhcmF0aW9uczogW10sIHByb3ZpZGVyczogW10sIC4uLmdldEdsb2JhbHNJbmplY3Rpb25zKCkgfTtcblxuICByZXR1cm4ge1xuICAgIGRlY2xhcmF0aW9uczogWy4uLmdsb2JhbHMuZGVjbGFyYXRpb25zLCAuLi5vcHRpb25zLmRlY2xhcmF0aW9ucywgLi4ub3B0aW9ucy5lbnRyeUNvbXBvbmVudHNdLFxuICAgIGltcG9ydHM6IFsuLi4ob3B0aW9ucy5kaXNhYmxlQW5pbWF0aW9ucyA/IFtOb29wQW5pbWF0aW9uc01vZHVsZV0gOiBbXSksIC4uLmdsb2JhbHMuaW1wb3J0cywgLi4ub3B0aW9ucy5pbXBvcnRzXSxcbiAgICBwcm92aWRlcnM6IFsuLi5nbG9iYWxzLnByb3ZpZGVycywgLi4ub3B0aW9ucy5wcm92aWRlcnMsIC4uLm9wdGlvbnMubW9ja3MubWFwKCh0eXBlKSA9PiBvcHRpb25zLm1vY2tQcm92aWRlcih0eXBlKSldLFxuICAgIGVudHJ5Q29tcG9uZW50czogWy4uLm9wdGlvbnMuZW50cnlDb21wb25lbnRzXSxcbiAgICB0ZWFyZG93bjpcbiAgICAgIC8vIENhcmV0YWtlciBub3RlOiB3ZSBkb24ndCB3YW50IHRvIG1lcmdlIHRoZSBgZ2xvYmFscy50ZWFyZG93bmAgYW5kIGBvcHRpb25zLnRlYXJkb3duYCwgc2luY2UgYG9wdGlvbnMudGVhcmRvd25gXG4gICAgICAvLyBpcyBhbHdheXMgZGVmaW5lZC4gSWYgdGhlIHVzZXIgY2FsbHMgYGRlZmluZUdsb2JhbHNJbmplY3Rpb25zKHsgdGVhcmRvd246IHsgLi4uIH0gfSlgIGFuZCB3ZSBtZXJnZSBpdCB3aXRoXG4gICAgICAvLyBgb3B0aW9ucy50ZWFyZG93bmAsIHRoZW4gYG9wdGlvbnMudGVhcmRvd25gIHdpbGwgYWx3YXlzIG92ZXJyaWRlIGdsb2JhbCBvcHRpb25zLlxuICAgICAgeyAuLi4oZ2xvYmFscy50ZWFyZG93biB8fCBvcHRpb25zLnRlYXJkb3duKSB9LFxuICB9O1xufVxuIl19