import { queries as DOMQueries, getDefaultNormalizer } from '@testing-library/dom';
export class DOMSelector {
    // Wrap selector functions in a class to make reflection easier in getChild
    constructor(execute) {
        this.execute = execute;
    }
}
export const byLabel = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByLabelText(el, matcher, options));
export const byPlaceholder = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByPlaceholderText(el, matcher, options));
export const byText = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByText(el, matcher, options));
export const byTextContent = (matcher, options) => {
    let textContentMatcher;
    const normalizer = options?.normalizer || getDefaultNormalizer(options);
    const getTextContent = (elem) => normalizer(elem?.textContent ?? '');
    if (typeof matcher === 'string' || typeof matcher === 'number') {
        textContentMatcher = (_, elem) => {
            if (options?.exact === false) {
                return (getTextContent(elem)
                    .toLowerCase()
                    .indexOf(matcher.toString().toLowerCase()) >= 0);
            }
            return getTextContent(elem) === matcher.toString();
        };
    }
    else if (matcher instanceof RegExp) {
        textContentMatcher = (_, elem) => matcher.test(getTextContent(elem));
    }
    else if (typeof matcher === 'function') {
        textContentMatcher = (_, elem) => matcher(getTextContent(elem), elem);
    }
    else {
        throw new Error(`Matcher type not supported: ${typeof matcher}`);
    }
    return new DOMSelector(el => DOMQueries.queryAllByText(el, textContentMatcher, options));
};
export const byAltText = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByAltText(el, matcher, options));
export const byTitle = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByTitle(el, matcher, options));
export const byTestId = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByTestId(el, matcher, options));
export const byValue = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByDisplayValue(el, matcher, options));
export const byRole = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByRole(el, matcher, options));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLXNlbGVjdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3NwZWN0YXRvci9zcmMvbGliL2RvbS1zZWxlY3RvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUtMLE9BQU8sSUFBSSxVQUFVLEVBQ3JCLG9CQUFvQixFQUVyQixNQUFNLHNCQUFzQixDQUFDO0FBTTlCLE1BQU0sT0FBTyxXQUFXO0lBQ3RCLDJFQUEyRTtJQUMzRSxZQUE0QixPQUEyQztRQUEzQyxZQUFPLEdBQVAsT0FBTyxDQUFvQztJQUFHLENBQUM7Q0FDNUU7QUFJRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQXVCLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQzlELElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUU5RSxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQXVCLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQ3BFLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLHlCQUF5QixDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUVwRixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQStDLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQ3JGLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFFekUsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsT0FBZ0IsRUFBRSxPQUF5QyxFQUFlLEVBQUU7SUFDeEcsSUFBSSxrQkFBMkIsQ0FBQztJQUNoQyxNQUFNLFVB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QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgTWF0Y2hlcixcbiAgTWF0Y2hlck9wdGlvbnMsXG4gIE5vcm1hbGl6ZXJGbixcbiAgU2VsZWN0b3JNYXRjaGVyT3B0aW9ucyxcbiAgcXVlcmllcyBhcyBET01RdWVyaWVzLFxuICBnZXREZWZhdWx0Tm9ybWFsaXplcixcbiAgQnlSb2xlT3B0aW9uc1xufSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L2RvbSc7XG5cbmludGVyZmFjZSBNYW5kYXRvcnlTZWxlY3Rvck1hdGNoaW5nT3B0aW9ucyBleHRlbmRzIE1hdGNoZXJPcHRpb25zIHtcbiAgc2VsZWN0b3I6IFNlbGVjdG9yTWF0Y2hlck9wdGlvbnNbJ3NlbGVjdG9yJ107XG59XG5cbmV4cG9ydCBjbGFzcyBET01TZWxlY3RvciB7XG4gIC8vIFdyYXAgc2VsZWN0b3IgZnVuY3Rpb25zIGluIGEgY2xhc3MgdG8gbWFrZSByZWZsZWN0aW9uIGVhc2llciBpbiBnZXRDaGlsZFxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgZXhlY3V0ZTogKGVsOiBIVE1MRWxlbWVudCkgPT4gSFRNTEVsZW1lbnRbXSkge31cbn1cblxuZXhwb3J0IHR5cGUgRE9NU2VsZWN0b3JGYWN0b3J5PFRPcHRpb25zIGV4dGVuZHMgTWF0Y2hlck9wdGlvbnMgPSBNYXRjaGVyT3B0aW9ucz4gPSAobWF0Y2hlcjogTWF0Y2hlciwgb3B0aW9ucz86IFRPcHRpb25zKSA9PiBET01TZWxlY3RvcjtcblxuZXhwb3J0IGNvbnN0IGJ5TGFiZWw6IERPTVNlbGVjdG9yRmFjdG9yeSA9IChtYXRjaGVyLCBvcHRpb25zKSA9PlxuICBuZXcgRE9NU2VsZWN0b3IoZWwgPT4gRE9NUXVlcmllcy5xdWVyeUFsbEJ5TGFiZWxUZXh0KGVsLCBtYXRjaGVyLCBvcHRpb25zKSk7XG5cbmV4cG9ydCBjb25zdCBieVBsYWNlaG9sZGVyOiBET01TZWxlY3RvckZhY3RvcnkgPSAobWF0Y2hlciwgb3B0aW9ucykgPT5cbiAgbmV3IERPTVNlbGVjdG9yKGVsID0+IERPTVF1ZXJpZXMucXVlcnlBbGxCeVBsYWNlaG9sZGVyVGV4dChlbCwgbWF0Y2hlciwgb3B0aW9ucykpO1xuXG5leHBvcnQgY29uc3QgYnlUZXh0OiBET01TZWxlY3RvckZhY3Rvcnk8U2VsZWN0b3JNYXRjaGVyT3B0aW9ucz4gPSAobWF0Y2hlciwgb3B0aW9ucykgPT5cbiAgbmV3IERPTVNlbGVjdG9yKGVsID0+IERPTVF1ZXJpZXMucXVlcnlBbGxCeVRleHQoZWwsIG1hdGNoZXIsIG9wdGlvbnMpKTtcblxuZXhwb3J0IGNvbnN0IGJ5VGV4dENvbnRlbnQgPSAobWF0Y2hlcjogTWF0Y2hlciwgb3B0aW9uczogTWFuZGF0b3J5U2VsZWN0b3JNYXRjaGluZ09wdGlvbnMpOiBET01TZWxlY3RvciA9PiB7XG4gIGxldCB0ZXh0Q29udGVudE1hdGNoZXI6IE1hdGNoZXI7XG4gIGNvbnN0IG5vcm1hbGl6ZXI6IE5vcm1hbGl6ZXJGbiA9IG9wdGlvbnM/Lm5vcm1hbGl6ZXIgfHwgZ2V0RGVmYXVsdE5vcm1hbGl6ZXIob3B0aW9ucyk7XG4gIGNvbnN0IGdldFRleHRDb250ZW50ID0gKGVsZW06IEVsZW1lbnQgfCBudWxsKTogc3RyaW5nID0+IG5vcm1hbGl6ZXIoZWxlbT8udGV4dENvbnRlbnQgPz8gJycpO1xuXG4gIGlmICh0eXBlb2YgbWF0Y2hlciA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG1hdGNoZXIgPT09ICdudW1iZXInKSB7XG4gICAgdGV4dENvbnRlbnRNYXRjaGVyID0gKF8sIGVsZW0pID0+IHtcbiAgICAgIGlmIChvcHRpb25zPy5leGFjdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBnZXRUZXh0Q29udGVudChlbGVtKVxuICAgICAgICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgIC5pbmRleE9mKG1hdGNoZXIudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpKSA+PSAwXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXRUZXh0Q29udGVudChlbGVtKSA9PT0gbWF0Y2hlci50b1N0cmluZygpO1xuICAgIH07XG4gIH0gZWxzZSBpZiAobWF0Y2hlciBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHRleHRDb250ZW50TWF0Y2hlciA9IChfLCBlbGVtKSA9PiBtYXRjaGVyLnRlc3QoZ2V0VGV4dENvbnRlbnQoZWxlbSkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBtYXRjaGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGV4dENvbnRlbnRNYXRjaGVyID0gKF8sIGVsZW0pID0+IG1hdGNoZXIoZ2V0VGV4dENvbnRlbnQoZWxlbSksIGVsZW0pO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihgTWF0Y2hlciB0eXBlIG5vdCBzdXBwb3J0ZWQ6ICR7dHlwZW9mIG1hdGNoZXJ9YCk7XG4gIH1cblxuICByZXR1cm4gbmV3IERPTVNlbGVjdG9yKGVsID0+IERPTVF1ZXJpZXMucXVlcnlBbGxCeVRleHQoZWwsIHRleHRDb250ZW50TWF0Y2hlciwgb3B0aW9ucykpO1xufTtcblxuZXhwb3J0IGNvbnN0IGJ5QWx0VGV4dDogRE9NU2VsZWN0b3JGYWN0b3J5ID0gKG1hdGNoZXIsIG9wdGlvbnMpID0+XG4gIG5ldyBET01TZWxlY3RvcihlbCA9PiBET01RdWVyaWVzLnF1ZXJ5QWxsQnlBbHRUZXh0KGVsLCBtYXRjaGVyLCBvcHRpb25zKSk7XG5cbmV4cG9ydCBjb25zdCBieVRpdGxlOiBET01TZWxlY3RvckZhY3RvcnkgPSAobWF0Y2hlciwgb3B0aW9ucykgPT4gbmV3IERPTVNlbGVjdG9yKGVsID0+IERPTVF1ZXJpZXMucXVlcnlBbGxCeVRpdGxlKGVsLCBtYXRjaGVyLCBvcHRpb25zKSk7XG5cbmV4cG9ydCBjb25zdCBieVRlc3RJZDogRE9NU2VsZWN0b3JGYWN0b3J5ID0gKG1hdGNoZXIsIG9wdGlvbnMpID0+IG5ldyBET01TZWxlY3RvcihlbCA9PiBET01RdWVyaWVzLnF1ZXJ5QWxsQnlUZXN0SWQoZWwsIG1hdGNoZXIsIG9wdGlvbnMpKTtcblxuZXhwb3J0IGNvbnN0IGJ5VmFsdWU6IERPTVNlbGVjdG9yRmFjdG9yeSA9IChtYXRjaGVyLCBvcHRpb25zKSA9PlxuICBuZXcgRE9NU2VsZWN0b3IoZWwgPT4gRE9NUXVlcmllcy5xdWVyeUFsbEJ5RGlzcGxheVZhbHVlKGVsLCBtYXRjaGVyLCBvcHRpb25zKSk7XG5cbmV4cG9ydCBjb25zdCBieVJvbGU6IERPTVNlbGVjdG9yRmFjdG9yeTxCeVJvbGVPcHRpb25zPiA9IChtYXRjaGVyLCBvcHRpb25zKSA9PlxuICBuZXcgRE9NU2VsZWN0b3IoZWwgPT4gRE9NUXVlcmllcy5xdWVyeUFsbEJ5Um9sZShlbCwgbWF0Y2hlciwgb3B0aW9ucykpO1xuIl19