import { LicenseTest } from 'license-webpack-plugin/dist/LicenseTest';
import { LicenseIdentifiedModule } from 'license-webpack-plugin/dist/LicenseIdentifiedModule';
import { IncludeExcludeTest } from 'license-webpack-plugin/dist/IncludeExcludeTest';
import { Module } from 'license-webpack-plugin/dist/Module';
import { ConstructedStats } from 'license-webpack-plugin/dist/ConstructedStats';
interface ConstructedOptions {
    buildRoot: string;
    licenseInclusionTest: LicenseTest;
    unacceptableLicenseTest: LicenseTest;
    handleUnacceptableLicense: (packageName: string, licenseType: string) => void;
    handleMissingLicenseText: (packageName: string, licenseType: string | null) => string | null;
    perChunkOutput: boolean;
    licenseTemplateDir?: string;
    licenseFileOverrides: {
        [key: string]: string;
    };
    licenseTextOverrides: {
        [key: string]: string;
    };
    licenseTypeOverrides: {
        [key: string]: string;
    };
    renderLicenses: (modules: LicenseIdentifiedModule[]) => string;
    renderBanner: (filename: string, modules: LicenseIdentifiedModule[]) => string;
    outputFilename: string;
    addBanner: boolean;
    chunkIncludeExcludeTest: IncludeExcludeTest;
    modulesDirectories: string[] | null;
    additionalChunkModules: {
        [chunkName: string]: Module[];
    };
    additionalModules: Module[];
    preferredLicenseTypes: string[];
    handleLicenseAmbiguity: (packageName: string, licenses: {
        type: string;
        url: string;
    }[]) => string;
    handleMissingLicenseType: (packageName: string) => string | null;
    excludedPackageTest: (packageName: string) => boolean;
    stats: ConstructedStats;
    skipChildCompilers: boolean;
}
export { ConstructedOptions };
